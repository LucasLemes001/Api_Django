# good links:
# https://www.postgresqltutorial.com/postgresql-python/create-tables/
# https://dev.to/dennisivy11/easiest-django-postgres-connection-ever-with-railway-11h6
# https://www.youtube.com/watch?v=igXhsIgAU2g&ab_channel=GeekiePie
# https://www.freecodecamp.org/news/how-to-use-jwt-and-django-rest-framework-to-get-tokens/



# Steps made:

# 1 install virtual envoirement and activate it

# 2 install django

# 3 type on terminal two things: django-admin startproject <project name>

# 4 type on terminal the second thing : django-admin startapp <appname>

# 5 on the project folder, find the "settings.py" and in the variable "INSTALLED_APPS", put the <app name> folder. SO then the Django will know that this folder makes part of your project

# 6 install djangorestframework, and then put "rest_framework" into the variable "INSTALLED_APPS" on the step "5"

# 7 on the <app name> folder, find the "models.py" and then create your own table model: Example
    # class User(models.Model):
    # id =models.IntegerField(primary_key=True)
    # username = models.CharField(max_length=100, unique=True, required=True)
    # email = models.EmailField(unique=True, required=True)
    # password = models.CharField(max_length=100, required=True)

# 8 then go to "views.py" and add : from rest_framework.views import APIView, from rest_framework.response import Response, from .models import *

# 9 Create  a Class and name it as you prefer, better give it a name that explains simply what you intend to do

# 10 Create a def naming the method you wish and what you want to do: exemple: <INTENDED TO CREATE ADD A NEW USER IN DATABASE>
#     class RegisterView(APIView):

#     def post(self, request):

#         if UserModel.objects.filter(username=request.data['username']).exists():
#             return Response({"message": "Username already exists"})
        
#         if UserModel.objects.filter(email=request.data['email']).exists():
#             return Response({"message": "Email already exists"})

#         new_user = UserModel.objects.create(
#             id = request.data['id'],
#             username = request.data['username'],
#             email = request.data['email'],
#             password = pbkdf2_sha256.hash(request.data['password']),
#         )

#         return Response({"message": "User created successfully", "User": new_user.username})

# 11 Go to urls.py and import these thing : from django.conf.urls import url
                                            # from MyApp import views

# 12 then create the url to the model and class that you create in the steps 10
#     excemple: 
#           path("register/", views.RegisterView.as_view())

# 13 So then make the migration command, whenever you create an new object django make changes accordently:
    # command: python manage.py makemigrations (CERTIFIQUE-SE DE ESTAR DENTRO DA PASTA DO PROJETO <project name>)

# 14 Then if all runs well and the Model created, type on the terminal "python manage.py migrate"

# 15 Then run the Django using the command "python manage.py runserver"
                # If YOU GET A 404 NOT FUND, it is ok!! just add at the end the enpoint you created!!

# 16 Use Postman or any other tool to test your API. If you using postman, create a new WorkSpace if you like to
        # Then use the Envoirement to create a new base_url variable, and add the base of the endpoints: http://127.0.0.1:8000 to save you time
        # Then when you create an Endpoint, set afteer the Method: {{base_url}}/the endpoint
        # As the example up there: POST {{base_url}}/register/
            # inside the body, raw and Json:
            # {
                # "username":"Jhon Senna",
                # "password":"123456789",
                # "email":"jhon@teste.com"
            # }

# 17 Now, I made some endpoint to Check the User the we register, and the steps were ALMOST the same, exept the fact that we NEVER RETURN PASSWORD.
    # For this, I've created a new file inside the folder "My App" called "serializer.py"
    # and inside it imported the "from rest_framework import seializers" and "from .models import UserModel"
    # Then I created a new class and called it "UserRegisteredSerializer(serializers.ModelSerializer)"
    # added inside it:
        #class Meta:
            #model= UserModel
            #fields= ["id","username","email"] Not including the passwowrd




# 18. I Did installed "djangorestframework_simplejwt" and put in the "settings.py"
    # the  variable "REST_FRAMEWORK = {
    #     'DEFAULT_AUTHENTICATION_CLASSES': (
    #         'rest_framework_simplejwt.authentication.JWTAuthentication',
    #     )
    # }"    
    # Then in the variable "INSTALLED_APPS" put "rest_framework_simplejwt"


# 19. Then installed "from datetime import timedelta" for configure the duration of the tokens expiration
    #just like this: SIMPLE_JWT = {
    #     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),
    #     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    # } 

# 20. On "views.py" we define a new class for the checking of the user endpoint. In this case is the "UserListView(APIView)".
    #Inside it, we define a new function called: "def get(self, request):"
    # Then a new variable called: users = UserModel.objects.all(), that will querry all objects in database
    # Anotheer variable called "serializer = UserRegisteredSerializer(users,many=True)", that will serialize the data
    # Finally, we return the response with the serializer data.


# 21. For the endpoint works, we created a urlpattern in the "urls.py" and inside it created a new thing called: path("users/", views.UserListView.as_view())

#22. Afther this, I created a few endpoints to "Unregister" and "Login". And the logic is similar to the one above.
    # First you define a class, call as you want
    # Creat a function named with the method you want(GET, POST, PUT, DELETE)
        #  use inside the funtion some paramethers
            # self -> To you use access the objects instaced
            # request -> To you use access the incoming data from the client
            # user_id -> To you use access the id of the user espefically
    # Inside the function the logic you would like to do
        # For example: You would like to check if there's an user with the incoming "username"
        # You compare the incoming username with those inside the database -> this is the logic. 
        # and then you imagine something like:
            # " IF inside our database.the objects hare.we're loking something specific(names iqual to the username).do he have it?" -> this is the loigic
            # and the sentence will be sometihing like this:
                # "if UserModel.objects.filter(username=request.data['username']).exists()"
    # All you have to do is then return the response after you threat the data.
